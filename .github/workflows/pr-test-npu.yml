name: PR Test (Ascend NPU)

on:
  push:
    branches: [ main ]
    paths:
      - "python/**"
      - "csrc/**"
      - "test/**"
      - ".github/workflows/pr-test-npu.yml"
  pull_request:
    branches: [ main ]
    paths:
      - "python/**"
      - "csrc/**"
      - "test/**"
      - ".github/workflows/pr-test-npu.yml"
  workflow_dispatch:

concurrency:
  group: pr-test-npu-${{ github.ref }}
  cancel-in-progress: true

jobs:
  per-commit-1-ascend-npu:
    if: (github.repository == 'sgl-project/sgl-kernel-npu' || github.event_name == 'pull_request') &&
        github.event.pull_request.draft == false
    runs-on: linux-aarch64-a3-node0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          bash build.sh
          python3 -m pip uninstall -y deepep
          python3 -m pip install output/deep_ep-1.0.0+d96c62d0-cp310-cp310-linux_aarch64.whl

      - name: Run test
        timeout-minutes: 30
        env:
          SGLANG_USE_MODELSCOPE: true
          SGLANG_IS_IN_CI: true
        run: |
          cd test/python/deepep
          bash run_test.sh

  per-commit-2-ascend-npu:
    if: (github.repository == 'sgl-project/sgl-kernel-npu' || github.event_name == 'pull_request') &&
        github.event.pull_request.draft == false
    runs-on: linux-aarch64-a3-node0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          bash build.sh
          python3 -m pip uninstall -y deepep
          python3 -m pip install output/deep_ep-1.0.0+d96c62d0-cp310-cp310-linux_aarch64.whl

      - name: Run test
        timeout-minutes: 30
        env:
          SGLANG_USE_MODELSCOPE: true
          SGLANG_IS_IN_CI: true
        run: |
          cd test/python
          python3 test_intranode.py

  finish:
    if: always()
    needs:
      - per-commit-1-ascend-npu
      - per-commit-2-ascend-npu
    runs-on: ubuntu-latest
    steps:
      - name: Check all dependent job statuses
        run: |
          results=(${{ join(needs.*.result, ' ') }})
          for result in "${results[@]}"; do
            if [ "$result" = "failure" ] || [ "$result" = "cancelled" ]; then
              echo "Job failed with result: $result"
              exit 1
            fi
          done
          echo "All jobs completed successfully"
          exit 0